import{_ as s,c as a,o as e,a1 as i}from"./chunks/framework.CirlnVTN.js";const b=JSON.parse('{"title":"前端本地开发","description":"","frontmatter":{},"headers":[],"relativePath":"doc/frontendDev.md","filePath":"doc/frontendDev.md"}'),p={name:"doc/frontendDev.md"},t=i('<h1 id="前端本地开发" tabindex="-1">前端本地开发 <a class="header-anchor" href="#前端本地开发" aria-label="Permalink to &quot;前端本地开发&quot;">​</a></h1><p>前端仓库为：<a href="https://github.com/wanglin2/lx-doc" target="_blank" rel="noreferrer">https://github.com/wanglin2/lx-doc</a>。</p><p>实现克隆本仓库，然后要开发哪个项目进入哪个目录即可。</p><h2 id="通用项目" tabindex="-1">通用项目 <a class="header-anchor" href="#通用项目" aria-label="Permalink to &quot;通用项目&quot;">​</a></h2><p><code>workbench</code>、<code>whiteboard</code>、<code>sheet</code>、<code>ppt</code>、<code>doc</code>、<code>markdown</code>、<code>bpmn</code>、<code>note</code>项目的本地开发模式都是一致的。</p><p>1.安装依赖</p><p>进入对应项目目录下执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span></span></code></pre></div><p>2.启动</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mockDev</span></span></code></pre></div><p>接口请求都会走模拟数据，模拟数据可以在<code>/src/api/mock.js</code>文件中配置。</p><p>如果你先部署了后端项目，那么可以直接访问后端接口，此时启动命令为：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><p>默认代理的地址为<code>http://localhost:9222/</code>，如果你部署的后端服务端口不是<code>9222</code>，那么可以自行修改各个项目下的配置文件。</p><p>3.打包</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>打包生成的<code>dist</code>目录下的内容即是部署产物。</p><h2 id="思维导图项目" tabindex="-1">思维导图项目 <a class="header-anchor" href="#思维导图项目" aria-label="Permalink to &quot;思维导图项目&quot;">​</a></h2><p><code>mind-map</code>目录。</p><p>1.安装依赖</p><p>进入项目目录下执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span></span></code></pre></div><p>2.启动</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mockServe</span></span></code></pre></div><p>接口请求都会走模拟数据，模拟数据可以在<code>/src/api/mock.js</code>文件中配置。</p><p>如果你先部署了后端项目，那么可以直接访问后端接口，此时启动命令为：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span></span></code></pre></div><p>默认代理的地址为<code>http://localhost:9222/</code>，如果你部署的后端服务端口不是<code>9222</code>，那么可以自行修改各个项目下的配置文件。</p><p>3.打包</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>打包生成的<code>dist</code>目录下的内容即是部署产物。</p><h2 id="流程图项目" tabindex="-1">流程图项目 <a class="header-anchor" href="#流程图项目" aria-label="Permalink to &quot;流程图项目&quot;">​</a></h2><p><code>flowchart</code>项目。</p><p>这个项目是在<a href="https://github.com/jgraph/drawio" target="_blank" rel="noreferrer">drawio</a>仓库的源码基础上修改的，由于<code>drawio</code>项目非常复杂，所以不建议修改该项目。</p><p>这个项目因为启动时间非常早，所以没有使用任何框架，也没有使用构建工具。</p><p>1.安装依赖</p><p>进入项目目录下执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span></span></code></pre></div><p>2.启动</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><p>要使用模拟数据，需要手动修改<code>/src/main/webapp/js/ui/api.js</code>文件中的<code>useMock</code>变量为<code>true</code>。</p><p>访问的地址为<code>http://localhost:9097/?id=123&amp;dev=1</code>，<code>id</code>可以随便写。</p><p>3.打包</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>因为这个项目的打包是通过<code>java</code>来实现的，所以你还需要安装<code>java</code>的环境。可以参考网上的一些教程，比如</p><p><a href="https://juejin.cn/post/7017686432009420808#heading-4" target="_blank" rel="noreferrer">DrawIO 二开</a>。</p><p>生成环境访问不需要带<code>dev</code>参数。</p><p>打包完了需要把整个<code>webapp</code>目录下的文件都上传到服务器。</p>',48),n=[t];function d(h,o,l,c,r,k){return e(),a("div",null,n)}const u=s(p,[["render",d]]);export{b as __pageData,u as default};
